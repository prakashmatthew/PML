train <- read.csv("pml-training")
train <- read.csv("~/pml-training")
setwd("C:/Users/hp laptop/Downloads/PML")
train <- read.csv("~/pml-training")
train <- read.csv("pml-training")
train <- read.csv(pml-training)
train <- read.csv("./pml-training")
train <- read.csv("/pml-training")
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
intrain <- createDataPartition(y=train$classe, p = 0.7, list = FALSE)
?createDataPartition
??createDataPartition
library(caret)
intrain <- createDataPartition(y=train$classe, p = 0.7, list = FALSE)
train1 <- train[intrain,]
test1 ,- train[-intrain,]
test1 <- train[-intrain,]
summary(train1)
titles(train1)
??titles
View(train)
c<- -intersect(colnames(test1, train1))
?intersect
c<- -intersect(colnames(test1), colnames(train1))
c<- intersect(colnames(test1), colnames(train1))
c<- intersect(colnames(test), colnames(train))
test[-c,]
test[-c(c),]
?c
cin<- intersect(colnames(test), colnames(train))
view(train1[-c(cin),])
summary(train1[-c(cin),])
summary(train1[-colnames(c((cin))),])
summary(train1[,-colnames(c((cin)))])
diffcol <- colnames(test1) - cin
colnames(test1)
test[,colnames(test)==colnames(train)]
test[,colnames(test)!=colnames(train)]
waht < - test[,-which(colnames(test)%in%cin)]
whatt < - test[,-which(colnames(test)%in%cin)]
whatt <  test[,-which(colnames(test)%in%cin)]
whatt <-  test[,-which(colnames(test)%in%cin)]
whatt <-  test[-which(colnames(test)%in%cin),]
whatt <-  test[which!(colnames(test)%in%cin),]
whatt <-  test[which(!(colnames(test)%in%cin)),]
View(whatt)
View(test)
View(train)
View(train)
colnames(test)
test%problem_id
summary(test%problem_id)
summary(test$problem_id)
test$problem_id
which(!(colnames(test)==colnames(train)))
test[,which(!(colnames(test)==colnames(train)))]
test[which(!(colnames(test)==colnames(train))),]
colnames(test[which(!(colnames(test)==colnames(train))),])
colnames(test[which(!(colnames(test)==colnames(train)))])
colnames(train[which(!(colnames(test)==colnames(train)))])
model1 <- train(classe~. , method = "rf", data = train1)
View(whatt)
predict_model1 <- predict(model1, test1)
confusionMatrix(test1$classe, predict_model1)
length(predict_model1)
confusionMatrix(test1$classe, predict(model1, test1))
predict(model1, test1)
summary(train1$classe)
model1
test1_1 <- test1[,-classe]
test1_1 <- test1[,-test1$classe]
test1_1 <- test1[,-c(classe)]
test1_1 <- test1[-classe,]
test1_1 <- test1[-c(classe),]
test1_1 <- test1
test1_1 <- test1_1[,-c(160)]
confusionMatrix(test1$classe, predict(model1, test1_1))
predict(predict(model1, test1_1))
summary(predict(model1, test1_1))
predict_model1 <- (predict(model1, newdata = test1_1))
length(predict_model1)
summary(train1)
View(test)
summary(train$user_name)
train1_adelmo <- train1[which(user_name == adelmo),]
train1_adelmo <- train1[,which(user_name == "adelmo")]
train1_adelmo <- train1[,which(train1$user_name == "adelmo")]
train1_adelmo <- train1[which(train1$user_name == "adelmo"),]
train1_carlitos <- train1[which(train1$user_name == "carlitos"),]
train1_charles <- train1[which(train1$user_name == "charles"),]
train1_eurico <- train1[which(train1$user_name == "eurico"),]
train1_jeremy <- train1[which(train1$user_name == "jeremy"),]
train1_pedro <- train1[which(train1$user_name == "pedro"),]
summary(train1$user_name)
model_rpart1 <- train(classe ~ . , method = "rpart", data = train1_adelmo)
library(caret)
model_rpart1 <- train(classe ~ . , method = "rpart", data = train1_adelmo)
model_rpart1$finalModel
library(rattle)
fancyRpartPlot(model_rpart1$finalModel)
test1_adelmo <- test1[where(test1$user_name == "adelmo"),]
test1_adelmo <- test1[which(test1$user_name == "adelmo"),]
predict1_adelmo <- predict(model_rpart1, test1_adelmo)
confusionMatrix(predict1_adelmo, test1_adelmo$classe)
length(predict1_adelmo)
length(test1_adelmo)
view(test1_adelmo)
View(test1_adelmo)
View(test1_adelmo)
View(train)
summary(test1)
corr <- abs(cor(train1[,-160]))
corr
corre <- abs(cor(train1[,-160]))
?cor
corre<- abs(cor(train1[,-160],train1[,-160]))
summary(train1)
table(summary(train1))
?for
?for
??for
for
P1 <- predict(model1, test)
P1 <- predict(model1_rpart1, test)
model1
model1_rpart1
P1 <- predict(model_rpart1, test)
View(train)
View(test)
View(test[,13:20])
View(test[,20])
View(test[,13:20])
View(test[,20])
colnames(test)
train2 <- train[,-c(1:7,160)]
corre<- abs(cor(train1[,-160],train1[,-160]))
corre<- abs(cor(train2))
?for
??for
?for
?
??for
train2 <- as.numeric(train2[,])
train2 <- as.numeric(train2[,])
train2 <- as.numeric(train2)
train2 <- as.double(train2[,])
train2 <- as.data.frame.numeric(train2)
View(train2)
train2 <- as.data.frame(train2)
train2 <- as.numeric(train2)
train2 <- train[,-c(1:7,160)]
corre<- abs(cor(train2))
corre<- abs(cor(train2[,]))
?sapply
nulls <- sapply(colnames(test),,length(""))
nulls <- colname(train[,3]
view(nulls)
nulls
nulls <- colname(train[,3])
nulls <- colnames(train[,3])
nulls
cn <- colnames(train)
nulls <- cn[1]
for(i in 1:120) {
nulls[i,1] <- cn[i]
nulls[i,2] <- length(is.na(train[,1])
}
for(i in 1:120) {
nulls[i,1] <- cn[i]
nulls[i,2] <- length(is.na(train[,1])}
for(i in 1:120) {
nulls[i,1] <- cn[i]
nulls[i,2] <- length(is.na(train[,1]))}
for(i in 1:160) {
nulls[i,1] <- cn[i]
nulls[i,2] <- length(is.na(train[,1]))}
for(i in 1:160) {
nulls[i,1] <- cn(i)
nulls[i,2] <- length(is.na(train[,1]))}
for(i in 1:160) {
nulls[i,1] <- cn[i]
nulls[i,2] <- length(is.na(train[,1]))}
for(i in 1:160) {
nulls[i,1] <- as.character(cn[i])
nulls[i,2] <- length(is.na(train[,1]))}
nulls[,1] <- colnames(train)
null[,1] <- colnames(train)
null[,1] <- cn
for(i in 1:160) {
nulls[i,1] <- NULL
nulls[i,2] <- length(is.na(train[,1]))}
for(i in 1:160) {
null1[i,1] <- NULL
null1[i,2] <- length(is.na(train[,1]))}
null1
train[!complete.cases(train),]
length(train[!complete.cases(train),])
null1 <- data.frame(cn)
for(i in 1:160) {
null1[i,2] <- length(is.na(train[,1]))}
View(null1)
for(i in 1:160) {
null1[i,2] <- length(!(train[,1]))}
View(null1)
for(i in 1:160) {
null1[i,2] <- length(is.na(train[,i]))}
View(null1)
for(i in 1:160) {
null1[i,2] <- length(!(train[,i]))}
View(null1)
for(i in 1:160) {
null1[i,2] <- length((train[,i]== NA))}
View(null1)
for(i in 1:160) {
null1[i,2] <- length((train[,i]== ""))}
View(null1)
for(i in 1:160) {
null1[i,2] <- sum((train[,i]== ""))}
View(null1)
View(train)
train3 <- train1[,-c(12:17,20,23,26,69:74,87:92,95,98,101,125:130,133,136,139)]
train3 <- train[,-c(12:17,20,23,26,69:74,87:92,95,98,101,125:130,133,136,139)]
corre
corre <- abs(cor(train3))
corre <- abs(cor(as.numeric(train3[,]),,)
corre <- abs(cor(as.numeric(train3[,]),,))
corre <- abs(cor(as.numeric(train3[,]),,))
corre <- abs(cor((train3[,-c(1:7)]),,))
train3 <- train[,-c(1,2:7,12:17,20,23,26,69:74,87:92,95,98,101,125:130,133,136,139)]
corre <- abs(cor((train3[,-c(1,120)]),,))
diag(corre) <- 0
which(corre>0.8, arr.ind = T)
which(corre>0.9, arr.ind = T)
library(caret)
m.rp.2 <- train(classe ~ . , method = "rpart", data = train3)
library(rattle)
fancyRpartPlot(m.rp.2$finalModel)
m.rf.2 <- train(classe ~ . , method = "rf", data = train3)
p3 <- predict(m.rf.2,newdata = test1)
length(p3)
m.rf.2
summary(p3)
ength(p3
length(p3)
length(p3)
for(i in 1:120){
for(j in 1:19622){
if(test3[i,j]== NA){
test3[i,j] <- 0
}
}
}
train4 <- train3
for(i in 1:120){
for(j in 1:19622){
if(train4[i,j]== NA){
train4[i,j] <- 0
}
}
}
for(i in 1:120){
for(j in 1:19622){
if(train4[i,j]== "NA"){
train4[i,j] <- 0
}
}
}
for(i in 1:120){
for(j in 1:19622){
if(train4[i,j]= NA){
train4[i,j] <- 0
}
}
}
for(i in 1:120){
for(j in 1:19622){
if(train4[i,j]= NA){
train4[i,j] <- 0
}
}
}
for(i in 1:120){
for(j in 1:19622){
if(train4[j,i]= NA){
train4[j,i] <- 0
}
}
}
View(train4)
for(i in 1:120){
for(j in 1:19622){
if(is.na(train4[j,i])){
train4[j,i] <- 0
}
}
}
View(train4)
m.rp.3 <- train(classe ~ . , method = "rpart", data = train4)
library(rattle)
fancyRpartPlot(m.rp.3$finalModel)
library(caret)
m.rp.3 <- train(classe ~ . , method = "rpart", data = train4)
library(rattle)
fancyRpartPlot(m.rp.3$finalModel)
p4 <- predict(m.rp.3, test1)
length(p4)
p4 <- predict(m.rp.3, test)
p4 <- predict(m.rp.2, test)
p4 <- predict(m.rf.2, test)
train5 <- train1
for(i in 1:120){
for(j in 1:19622){
if(is.na(train5[j,i])){
train5[j,i] <- 0
}
}
}
m.rp.4 <- train(classe ~ . , method = "rpart", data = train5)
fancyRpartPlot(m.rp.4$finalModel)
p.rp.4 <- predict(m.rp.4, test1)
length(p.rp.4)
View(null1)
for(i in 1:160) {
null1[i,3] <- sum(is.na(train[,i]))}
train6 <- na.omit(train)
table(train6$user_name)
m.rp.5 <- train(classe ~ . , method = "rpart", data = train6)
fancyRpartPlot(m.rp.5$finalModel)
p.rp.5 <- predict(m.rp.5, test)
length(p.rp.5)
View(test)
test2 <- test
for(i in 1:120){
for(j in 1:20){
if(is.na(test[j,i])){
test2[j,i] <- 0
}
}
p.rp.5 <- predict(m.rp.5, test2)
test2
.
}
test2 <- test
for(i in 1:120){
for(j in 1:20){
if(is.na(test[j,i])){
test2[j,i] <- 0
}
}
}
p.rp.5 <- predict(m.rp.5, test2)
test2
p.rp.5 <- predict(m.rp.5, test2)
View(test2)
p.rp.5 <- predict(m.rp.5, newdata = test2)
train <- read.csv("~/pml-training")
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
view(train5)
View(test)
View(train6)
View(train5)
train6 <- na.omit(train)
library(caret)
m.rp.5 <- train(classe ~ . , method = "rpart", data = train6)
fancyRpartPlot(m.rp.5$finalModel)
p.rp.5 <- predict(m.rp.5, newdata = test)
m.ct.1<- train(classe ~ . , method = "cart", data = train6)
p.ct.1<- predict(m.ct.1, newdata = test)
length(p.rp.5)
length(p.ct.1)
View(train6)
View(train6)
test6 <- na.omit(test)
test6 <- test
for(i in 1:120){
for(j in 1:6){
if(is.na(train5[j,i])){
test6[j,i] <- 0
}
}
}
p.rp.5 <- predict(m.rp.5, newdata = test6)
warning()
warnings()
View(test)
cn <- colnames(train)
null2 <- data.frame(cn)
for(i in 1:160) {
null2[i,2] <- sum((test[,i]== ""))}
for(i in 1:160) {
null1[i,3] <- sum(is.na(test[,i]))}
null2 <- data.frame(cn)
for(i in 1:160) {
null2[i,2] <- sum((test[,i]== ""))}
for(i in 1:160) {
null2[i,3] <- sum(is.na(test[,i]))}
View(null2)
test7 <- test[,-c(12:36,50:59,69:83,87:101,103:112,125:139,141:150)]
train7 <- train[,-c(12:36,50:59,69:83,87:101,103:112,125:139,141:150)]
m.rp.6 <- train(classe ~ . , method = "rpart", data = train7)
library(rattle)
fancyRpartPlot(m.rp.6$finalModel)
p.rp.6 <- predict(m.rp.6, test7)
m.rf.3 <- train(classe ~ . , method = "rf", data = train7)
p.rf.3 <- predict(m.rf.3, test7)
length(p.rp.6)
length(p.rf.3)
p.rf.3
p.rp.6
p.rp.6(3)
p.rp.6[3]
p.rp.6[13]
View(train7)
View(test)
m.rf.3
m.rp.6
train 8 <- train7[,-1]
train8 <- train7[,-1]
test8 <- test7[,-1]
m.rf.4 <- train(classe ~ . , method = "rf", data = train8)
p.rf.4 <- predict(m.rf.4, test8)
p.rf.4
library(caret)
install.packages("rmarkdown")
library(rmarkdown)
install.packages("knitr")
library("knitr", lib.loc="~/R/win-library/3.1")
rmarkdown::shiny_prerendered_clean('PML.html')
?createMultiFolds
library("caret", lib.loc="~/R/win-library/3.1")
10foldcv <- createMultiFolds(train8, k= 10, times = 10)
varImpPlot(m.rf.4)
?varImpPlot
??VarImpPlot
library("randomForest", lib.loc="~/R/win-library/3.1")
varImpPlot(m.rf.4)
m.rf.4
train9 <- train8[,-"classe"]
train9 <- train8[,-classe]
train9 <- train8[,-c(classe)]
train9 <- train8[,-c("classe")]
train9 <- train8[,-59]
train.label <- as.factor(train8$classe)
library(doSNOW)
train9 <- train8[,-59]
train.label <- as.factor(train8$classe)
cv.10folds <- createMultiFolds(train.label, k = 10, times = 10)
ctrl1 <- trainControl(method = "repeatedcv", number = 10, repeats = 10, index = cv.10folds)
library(doSNOW)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
m.rf.5 <- train( x = train9, y = train.label, method = rf, trControl = ctrl1)
stopCluster(cl)
p.rf.5 <- predict(m.rf.5,test8)
m.rf.5
p.rf.5
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
m.rf.5 <- train( x = train9, y = train.label, method = "rf", trControl = ctrl1)
cv.3folds <- createMultiFolds(train.label, k = 3, times = 5)
ctrl1 <- trainControl(method = "repeatedcv", number = 3, repeats = 5, index = cv.3folds)
library(doSNOW)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
m.rf.5 <- train( x = train9, y = train.label, method = "rf", trControl = ctrl1)
stopCluster(cl)
p.rf.5 <- predict(m.rf.5,test8)
m.rf.5
p.rf.5
test9 <- test8[,-59]
p.rf.5 <- predict(m.rf.5,test9)
View(test8)
View(test9)
View(train9)
p.rf.5 <- predict(m.rf.5,test)
p.rf.5 <- predict(m.rf.5,test8)
p.rf.5 <- predict(m.rf.5,test9)
p.rf.5
View(train9)
p.rf.5 <- predict(m.rf.5,train9)
p.rf.5 <- predict(m.rf.5,test9)
length(p.rf.5)
p.rf.5 <- predict(m.rf.5$finalModel,test9)
p.rf.5 <- predict(m.rf.5$finalModel,test9, type type = "class")
p.rf.5 <- predict(m.rf.5$finalModel,test9, type = "class")
m.rf.5$finalModel
?knit
??knit
library("knitr", lib.loc="~/R/win-library/3.1")
library("markdown", lib.loc="~/R/win-library/3.1")
options(pkgType = "source")
options(pkgType = "source")
library("markdown", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
library("jsonlite", lib.loc="~/R/win-library/3.1")
install.packages("rprojroot")
rmarkdown::shiny_prerendered_clean('PracticalMachineLearning_Submission.html')
